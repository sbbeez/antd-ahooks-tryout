{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Option","Select","getTableData","formData","current","pageSize","query","Object","entries","forEach","key","value","fetch","then","res","json","total","info","results","list","Form","useForm","form","useAntdTable","defaultPageSize","tableProps","search","type","changeType","submit","reset","advanceSearchForm","gutter","span","Item","label","name","placeholder","style","display","justifyContent","onClick","marginLeft","searchFrom","marginBottom","width","marginRight","onChange","Search","onSearch","columns","title","dataIndex","rowKey","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a356249d.chunk.js","sourcesContent":["/**\n * title: Form and Table data binding\n * desc: useAntdTable returns a search object after receiving a form instance.\n *\n * title.zh-CN: Form 与 Table 联动\n * desc.zh-CN: useAntdTable 接收 form 实例后，会返回 search 对象。\n */\n\nimport React from \"react\";\nimport { Button, Col, Form, Input, Row, Table, Select } from \"antd\";\nimport { useAntdTable } from \"ahooks\";\nimport { PaginatedParams } from \"ahooks/lib/useAntdTable\";\n\nconst { Option } = Select;\n\nconst getTableData = ({ current, pageSize }, formData) => {\n  let query = `page=${current}&size=${pageSize}`;\n  Object.entries(formData).forEach(([key, value]) => {\n    if (value) {\n      query += `&${key}=${value}`;\n    }\n  });\n\n  return fetch(`https://randomuser.me/api?results=55&${query}`)\n    .then(res => res.json())\n    .then(res => ({\n      total: res.info.results,\n      list: res.results\n    }));\n};\n\nexport default () => {\n  const [form] = Form.useForm();\n\n  const { tableProps, search } = useAntdTable(getTableData, {\n    defaultPageSize: 5,\n    form\n  });\n\n  const { type, changeType, submit, reset } = search;\n\n  const columns = [\n    {\n      title: \"name\",\n      dataIndex: \"name.last\"\n    },\n    {\n      title: \"email\",\n      dataIndex: \"email\"\n    },\n    {\n      title: \"phone\",\n      dataIndex: \"phone\"\n    },\n    {\n      title: \"gender\",\n      dataIndex: \"gender\"\n    }\n  ];\n\n  const advanceSearchForm = (\n    <div>\n      <Form form={form}>\n        <Row gutter={24}>\n          <Col span={8}>\n            <Form.Item label=\"name\" name=\"name\">\n              <Input placeholder=\"name\" />\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item label=\"email\" name=\"email\">\n              <Input placeholder=\"email\" />\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item label=\"phone\" name=\"phone\">\n              <Input placeholder=\"phone\" />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Form.Item style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n            <Button type=\"primary\" onClick={submit}>\n              Search\n            </Button>\n            <Button onClick={reset} style={{ marginLeft: 16 }}>\n              Reset\n            </Button>\n            <Button type=\"link\" onClick={changeType}>\n              Simple Search\n            </Button>\n          </Form.Item>\n        </Row>\n      </Form>\n    </div>\n  );\n\n  const searchFrom = (\n    <div style={{ marginBottom: 16 }}>\n      <Form form={form} style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <Form.Item name=\"gender\">\n          <Select style={{ width: 120, marginRight: 16 }} onChange={submit}>\n            <Option value=\"\">all</Option>\n            <Option value=\"male\">male</Option>\n            <Option value=\"female\">female</Option>\n          </Select>\n        </Form.Item>\n        <Form.Item name=\"name\">\n          <Input.Search\n            placeholder=\"enter name\"\n            style={{ width: 240 }}\n            onSearch={submit}\n          />\n        </Form.Item>\n        <Button type=\"link\" onClick={changeType}>\n          Advanced Search\n        </Button>\n      </Form>\n    </div>\n  );\n\n  return (\n    <div>\n      {type === \"simple\" ? searchFrom : advanceSearchForm}\n      <Table columns={columns} rowKey=\"email\" {...tableProps} />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}